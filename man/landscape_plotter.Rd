% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/custom_callbacks.R
\name{landscape_plotter}
\alias{landscape_plotter}
\title{Plot simulation landscapes}
\usage{
landscape_plotter(
  mod,
  col = NULL,
  fps_cap = 24,
  burn_in = 0,
  transpose = TRUE,
  new_window = TRUE,
  ...
)
}
\arguments{
\item{mod}{The model being used (created by \code{link{camodel}})}

\item{col}{a set of colors (character vector) of length equal to the number of 
states in the model.}

\item{fps_cap}{The maximum number of frame per seconds at which to plot the results}

\item{burn_in}{A number of iterations to skip before plotting}

\item{transpose}{Set to \code{TRUE} to transpose the landscape matrix 
before displaying it \code{\link[graphics]{image}}}

\item{new_window}{Controls whether the plots are displayed in a new window, 
or in the default device (typically the plot panel in Rstudio)}

\item{...}{other arguments are passed to \code{\link[graphics]{image}}}
}
\description{
This function creates another function that plot the model 
  landscape during the of simulation a stochastic cellular automaton.
}
\details{
This function creates another function that is suitable for use with 
  \code{\link{run_camodel}}. It allows plotting the landscape as it is being 
  simulated, using the base function \code{\link[graphics]{image}}. You can set 
  colors using the argument \code{col}, or tranpose the landscape before 
  plotting using \code{transpose}. The resulting function must by passed to 
  \code{\link{run_camodel}} as the control argument \code{custom_output_fun}. 
  
  \code{\link[graphics]{image}} tends to be quite slow at displaying matrices, 
  especially if the matrix is large, but if it is still too fast for your visualize 
  
  It is important to note that this function will probably massively slow down a 
  simulation, so this is mostly for exploratory analyses, or just to 
  have a good look of what is happening in a model.
}
\examples{

\dontrun{ 

# Display the psychedelic spirals of the rock-paper-scissor model as the model is 
# being run 
mod <- ca_library("rock-paper-scissor")
colors <- c("#fb8500", "#023047", "#8ecae6")
ctrl <- list(custom_output_every = 1, 
             custom_output_fun = landscape_plotter(mod, col = colors))
init <- generate_initmat(mod, rep(1, 3)/3, nr = 100, nc = 178)
run_camodel(mod, init, times = seq(0, 128), control = ctrl)

# Arid vegetation model 
mod <- ca_library("aridvege")
init <- generate_initmat(mod, rep(1, 3)/3, nr = 100, nc = 178)
colors <- c("gray80", "white", "darkgreen")
ctrl <- list(custom_output_every = 1, 
             custom_output_fun = landscape_plotter(mod, col = colors, xaxt = "n", 
                                                   yaxt = "n"))
run_camodel(mod, init, times = seq(0, 128), control = ctrl)

# Game of life, turning off plot decoration using extra arguments read by matplot()
mod <- ca_library("gameoflife") 
init <- generate_initmat(mod, c(0.5, 0.5), nr = 100, nc = 178)
colors <- c("white", "black") 
ctrl <- list(custom_output_every = 1, 
             custom_output_fun = landscape_plotter(mod, col = colors, 
                                                   xaxt = "n", 
                                                   yaxt = "n"))
run_camodel(mod, init, times = seq(0, 128), control = ctrl)

} 

}
\seealso{
trace_plotter, run_camodel
}
